{"version":3,"sources":["reportWebVitals.js","components/services/useFetchAnimes.js","components/services/storage.js","components/services/API.js","components/small/AnimeCover.js","components/small/Loading.js","components/pages/AnimesSearch.js","components/services/useFetchAnime.js","components/pages/AnimeMain.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","data","loading","fetchReducer","state","action","type","payload","useFetchAnimes","getAnimesFromAPI","searchValue","useReducer","dispatch","useEffect","timeOut","setTimeout","a","resource","console","log","status","error","clearTimeout","saveAnimesInStorage","animesData","Error","localStorage","setItem","JSON","stringify","loadAnimesFromStorage","animes","parse","getItem","saveAnimeInStorage","id","anime","loadAnimeFromStorage","BASE_URL","fetch","json","animesJSON","getAnimeFromAPI","animeData","animeJSON","AnimeCover","title","imageUrl","firstTitle","split","className","to","substring","src","alt","spin","keyframes","Loading","styled","div","AnimesSearch","useState","setSearchValue","placeholder","onChange","e","target","value","results","map","result","image_url","mal_id","useFetchAnime","setData","AnimeMain","useParams","fetchData","score","episodes","source","toLowerCase","href","url","rel","synopsis","trailer_url","width","height","frameborder","allowfullscreen","App","forceRefresh","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b4b6b9c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useReducer } from \"react\"\r\n\r\nconst initialState = {data:null, loading: false}\r\n\r\nconst fetchReducer = (state, action) => {\r\n    const {type, payload} = action;\r\n\r\n    switch(type){\r\n        case (\"Loading\"):\r\n            return ({...state, data:null, loading:true})\r\n        case (\"Success\"):\r\n            return({...state, data:payload, loading:false})\r\n        default: \r\n            return state;\r\n    } \r\n\r\n}\r\n\r\nfunction useFetchAnimes(getAnimesFromAPI, searchValue){\r\n    const [state, dispatch] = useReducer(fetchReducer, initialState);\r\n    \r\n    useEffect(()=>{\r\n        if(searchValue){\r\n            const timeOut = setTimeout(async ()=>{\r\n                dispatch({type: \"Loading\"});\r\n                try{\r\n                    const resource = await getAnimesFromAPI(searchValue);\r\n                    console.log(resource.status)\r\n                    if(resource.status!==404){\r\n                        dispatch({type: \"Success\", payload:resource})\r\n                    } else{\r\n                        dispatch({type: \"Success\", payload:null})\r\n                    }\r\n                }catch(error){\r\n                    console.error(error)\r\n                }\r\n\r\n            }, 500)\r\n            return()=>{\r\n                clearTimeout(timeOut);\r\n            }\r\n        }\r\n    }, [getAnimesFromAPI, searchValue])\r\n\r\n    return state\r\n    }\r\n\r\n\r\nexport default useFetchAnimes;\r\n","export function saveAnimesInStorage(animesData, searchValue) {\r\n    if (animesData === null) {\r\n      throw new Error('There is missing data from the animes to save');\r\n    }\r\n    localStorage.setItem(searchValue, JSON.stringify(animesData));\r\n  }\r\n  \r\n  export function loadAnimesFromStorage(searchValue) {\r\n    const animes = JSON.parse(localStorage.getItem(searchValue));\r\n    if (animes === null) {\r\n      throw new Error(`There are no saved animes with search value: ${searchValue}`);\r\n    }\r\n    return animes;\r\n  }\r\n  \r\nexport function saveAnimeInStorage(id, anime){\r\n  if(anime === null){\r\n    throw new Error('there are no animes to save')\r\n  } \r\n  localStorage.setItem(id, JSON.stringify(anime))\r\n}\r\n\r\n\r\nexport function loadAnimeFromStorage(id){\r\n  const anime = JSON.parse(localStorage.getItem(id))\r\n  if(anime===null){\r\n    throw new Error('there is no saved anime with that id')\r\n  }\r\n  return anime\r\n}\r\n","import {loadAnimesFromStorage, saveAnimesInStorage, saveAnimeInStorage, loadAnimeFromStorage} from './storage'\r\n\r\nconst BASE_URL = 'https://api.jikan.moe/v3';\r\n\r\nasync function getAnimesFromAPI (searchValue){\r\n    \r\n    try{\r\n        return loadAnimesFromStorage(searchValue);\r\n    }catch{\r\n        const animesData = await fetch(`${BASE_URL}/search/anime?q=${searchValue}`) \r\n        const animesJSON = await animesData.json();\r\n        saveAnimesInStorage(animesJSON,searchValue)\r\n        return animesJSON;\r\n    }\r\n}\r\n\r\nexport async function getAnimeFromAPI (id){\r\n    \r\n    try{\r\n        return loadAnimeFromStorage(id)\r\n    }catch{\r\n        const animeData = await fetch(`${BASE_URL}/anime/${id}`)\r\n        const animeJSON = await (animeData.json());\r\n        saveAnimeInStorage(id, animeJSON)\r\n        return animeJSON;\r\n    }\r\n}\r\n\r\n\r\nexport default getAnimesFromAPI;\r\n","import  { NavLink } from 'react-router-dom';\r\nimport './AnimeCover.css'\r\n\r\nfunction AnimeCover({title, imageUrl, id}){\r\n    const firstTitle = title.split(\":\")\r\n\r\n\r\n    return(\r\n        <div className=\"container\" id=\"container-cover\">\r\n        <NavLink id=\"anime-link\" to={`/anime/${id}`}>\r\n            <h3>{firstTitle[0].substring(0,24)}</h3>\r\n            <img id=\"image-cover\" src={imageUrl} alt={title}/>\r\n        </NavLink>        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnimeCover;","import styled from '@emotion/styled';\nimport { keyframes } from '@emotion/react';\n\nconst spin = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst Loading = styled.div`\n  width: 5em;\n  height: 5em;\n  border: 1em solid black;\n  border-radius: 50%;\n  color: black;\n  border-top-color: transparent;\n  animation: ${spin} 1s linear infinite;\n`;\n\nexport default Loading;\n","import { useState } from \"react\";\r\nimport useFetchAnimes from \"../services/useFetchAnimes\";\r\nimport getAnimesFromAPI from \"../services/API\"\r\nimport AnimeCover from '../small/AnimeCover'\r\nimport Loading from '../small/Loading'\r\nimport './AnimesSearch.css'\r\n\r\nfunction AnimesSearch(){\r\n    const [searchValue, setSearchValue] = useState(null);\r\n    const {data, loading} = useFetchAnimes(getAnimesFromAPI, searchValue);\r\n\r\n    return (\r\n    <div id=\"animes-search\">\r\n        <div id=\"container-input\" className=\"columns is-mobile is-centered\">\r\n            <input className=\"input is-normal\" id=\"search-input\" type=\"text\" placeholder=\"Look for an anime\" onChange={(e)=>setSearchValue(e.target.value)}/>\r\n        </div>\r\n        <div className=\"columns is-mobile is-centered\" id=\"container-loading\">\r\n            {loading &&\r\n                <Loading/>\r\n            }\r\n        </div>\r\n    <div className=\"container\" id=\"container-covers\">\r\n    {data ? (\r\n        data.results.map((result)=>(\r\n            <AnimeCover\r\n                key={result.title}\r\n                title = {result.title}\r\n                imageUrl = {result.image_url}\r\n                id={result.mal_id}\r\n            />\r\n        ))\r\n    ):\"\"}    \r\n    </div>\r\n    </div>)\r\n}\r\n\r\nexport default AnimesSearch;","import { useEffect, useState } from \"react\";\r\n\r\nfunction useFetchAnime(getAnimeFromAPI, id){\r\n    \r\n   const [data, setData] = useState(null);\r\n\r\n   useEffect(()=> {\r\n       try{\r\n        setData(getAnimeFromAPI(id))\r\n       }\r\n       catch(error){\r\n        console.error(error)\r\n       }\r\n   }, [getAnimeFromAPI, id])\r\n\r\n    return data\r\n}\r\n\r\nexport default useFetchAnime;","import { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {getAnimeFromAPI} from '../services/API'\r\nimport useFetchAnime from '../services/useFetchAnime'\r\nimport './AnimeMain.css'\r\n\r\nfunction AnimeMain (){\r\n    const { id } = useParams();\r\n    const resource = useFetchAnime(getAnimeFromAPI, id)\r\n    const [data, setData] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            setData(await resource);\r\n\r\n        }\r\n        fetchData();\r\n    },[resource])\r\n\r\n    return (\r\n        <div id=\"anime-search\">\r\n            {data && (\r\n                <div className=\"columns\">\r\n                    <div className=\"column\" id=\"column-1\">\r\n                        <h1 className=\"is-size-2\">{data.title}</h1>\r\n                        <img src={data.image_url} alt={data.title} />\r\n                    </div>\r\n                    <div className=\"column\" id=\"column-2\">\r\n                        <div>Score: {data.score}</div>\r\n                        <div>Episodes: {data.episodes}</div>\r\n                        {data.source === 'Original' ? (\r\n                        <div>Original anime</div>\r\n                        ) : (\r\n                        <div>Based on a {data.source.toLowerCase()}</div>\r\n                        )}\r\n                        <a href={data.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        Check it out on MAL!\r\n                        </a>\r\n                        <hr></hr>\r\n                        <p>{data.synopsis}</p>\r\n                    </div>\r\n                    {data.trailer_url && (\r\n                        <div className=\"column\" id=\"column-3\">\r\n                        <h1 className=\"is-size-2\" id=\"main-title\">Trailer</h1>\r\n                        <iframe\r\n                            id=\"trailer\"\r\n                            title={`Trailer for ${data.title}`}\r\n                            width=\"350\"\r\n                            height=\"300\"\r\n                            src={data.trailer_url}\r\n                            frameborder=\"0\"\r\n                            allowfullscreen\r\n                        />\r\n                        </div>)                    \r\n                    }\r\n                </div>\r\n            )}       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnimeMain;","import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom';\nimport AnimesSearch  from './components/pages/AnimesSearch'\nimport AnimeMain  from './components/pages/AnimeMain'\nimport './App.css'\n\nfunction App() {\n\n  return (\n    <div className=\"container\" id=\"main-container\"> \n    <Router forceRefresh>\n      <div id=\"navbar\"> \n            <NavLink  className=\"navbar-item\" id=\"nav-link\" to=\"/\">Home</NavLink>\n      </div>\n      <Route path=\"/\" exact>\n        <AnimesSearch />\n      </Route>\n      <Route path=\"/anime/:id\">\n        <AnimeMain />\n      </Route>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}